import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useTelegram } from '../hooks/useTelegram';
import type { AdminUser, User } from '../types';
import {
	fetchAdmins,
	removeAdmin,
	searchUsers,
	addAdminByUsername,
} from '../api';

const ManageAdminsPage: React.FC = () => {
	const { initData } = useTelegram();
	const navigate = useNavigate();
	const [admins, setAdmins] = useState<AdminUser[]>([]);
	const [loading, setLoading] = useState(true);
	const [isAddModalOpen, setIsAddModalOpen] = useState(false);
	const [searchQuery, setSearchQuery] = useState('');
	const [searchResults, setSearchResults] = useState<User[]>([]);
	const [searchLoading, setSearchLoading] = useState(false);
	const [selectedUser, setSelectedUser] = useState<User | null>(null);
	const [operationLoading, setOperationLoading] = useState(false);
	const [searchTimeout, setSearchTimeout] = useState<number | null>(null);
	const [notification, setNotification] = useState<{
		message: string;
		type: 'success' | 'error';
	} | null>(null);

	useEffect(() => {
		loadAdmins();
	}, []);

	// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
	useEffect(() => {
		return () => {
			if (searchTimeout) {
				clearTimeout(searchTimeout);
			}
		};
	}, [searchTimeout]);

	const loadAdmins = async () => {
		if (!initData) return;

		try {
			setLoading(true);
			const adminsData = await fetchAdmins(initData);
			setAdmins(adminsData);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω–æ–≤:', error);
		} finally {
			setLoading(false);
		}
	};

	// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å debounce
	const handleSearch = async (query: string) => {
		if (!initData || !query.trim()) {
			setSearchResults([]);
			return;
		}

		try {
			setSearchLoading(true);
			const users = await searchUsers(initData, query.trim());
			setSearchResults(users);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
			setSearchResults([]);
		} finally {
			setSearchLoading(false);
		}
	};

	// Debounced –ø–æ–∏—Å–∫
	const handleSearchInput = (query: string) => {
		setSearchQuery(query);

		// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
		if (searchTimeout) {
			clearTimeout(searchTimeout);
		}

		// –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è - —Å—Ä–∞–∑—É –æ—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		if (!query.trim()) {
			setSearchResults([]);
			setSearchLoading(false);
			return;
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
		setSearchLoading(true);

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
		const newTimeout = setTimeout(() => {
			handleSearch(query);
		}, 300) as unknown as number; // –ó–∞–¥–µ—Ä–∂–∫–∞ 300–º—Å

		setSearchTimeout(newTimeout);
	};

	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
	const handleAddAdmin = async () => {
		if (!initData || !selectedUser?.username) return;

		try {
			setOperationLoading(true);
			const result = await addAdminByUsername(initData, selectedUser.username);

			if (result.success) {
				setNotification({
					message: '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
					type: 'success',
				});
				setTimeout(() => setNotification(null), 3000);
				setIsAddModalOpen(false);
				setSearchQuery('');
				setSearchResults([]);
				setSelectedUser(null);
				await loadAdmins();
			} else {
				setNotification({
					message: `–û—à–∏–±–∫–∞: ${result.message}`,
					type: 'error',
				});
				setTimeout(() => setNotification(null), 3000);
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
			setNotification({
				message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞',
				type: 'error',
			});
			setTimeout(() => setNotification(null), 3000);
		} finally {
			setOperationLoading(false);
		}
	};

	const handleRemoveAdmin = async (admin: AdminUser) => {
		if (!initData) return;

		if (!confirm(`–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ ${admin.username || admin.telegramId}?`)) {
			return;
		}

		try {
			setOperationLoading(true);
			const result = await removeAdmin(initData, admin.telegramId);

			if (result.success) {
				setNotification({ message: '–ê–¥–º–∏–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!', type: 'success' });
				setTimeout(() => setNotification(null), 3000);
				await loadAdmins();
			} else {
				setNotification({
					message: `–û—à–∏–±–∫–∞: ${result.message}`,
					type: 'error',
				});
				setTimeout(() => setNotification(null), 3000);
			}
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞:', error);
			setNotification({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞', type: 'error' });
			setTimeout(() => setNotification(null), 3000);
		} finally {
			setOperationLoading(false);
		}
	};

	if (loading) {
		return (
			<div className='min-h-screen bg-gray-900 flex items-center justify-center'>
				<div className='text-white text-xl'>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
			</div>
		);
	}

	return (
		<div
			className='min-h-screen p-4'
			style={{
				background: 'var(--tg-theme-bg-color)',
				color: 'var(--tg-theme-text-color)',
			}}
		>
			<div className='max-w-4xl mx-auto'>
				{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
				<div className='flex items-center justify-between mb-6'>
					<div className='flex items-center gap-4'>
						<button
							onClick={() => navigate('/admin')}
							className='text-lg transition-opacity hover:opacity-70'
							style={{ color: 'var(--tg-theme-link-color)' }}
						>
							‚Üê –ù–∞–∑–∞–¥
						</button>
						<h1 className='text-2xl font-bold'>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏</h1>
					</div>
					<button
						onClick={() => setIsAddModalOpen(true)}
						className='px-4 py-2 rounded-lg transition-opacity hover:opacity-80'
						style={{
							background: 'var(--tg-theme-button-color)',
							color: 'var(--tg-theme-button-text-color)',
						}}
						disabled={operationLoading}
					>
						–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞
					</button>
				</div>

				{/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
				{notification && (
					<div
						className='mb-6 p-4 rounded-lg border'
						style={{
							background:
								notification.type === 'success'
									? 'var(--tg-theme-button-color)'
									: 'var(--tg-theme-secondary-bg-color)',
							color:
								notification.type === 'success'
									? 'var(--tg-theme-button-text-color)'
									: 'var(--tg-theme-destructive-text-color, #dc2626)',
							borderColor:
								notification.type === 'success'
									? 'var(--tg-theme-button-color)'
									: 'var(--tg-theme-destructive-text-color, #fca5a5)',
						}}
					>
						{notification.message}
					</div>
				)}

				{/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */}
				<div
					className='rounded-lg p-4 mb-6 border'
					style={{
						background: 'var(--tg-theme-secondary-bg-color)',
						borderColor: 'var(--tg-theme-hint-color)',
					}}
				>
					<h3
						className='text-lg font-semibold mb-2'
						style={{ color: 'var(--tg-theme-link-color)' }}
					>
						üí° –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞?
					</h3>
					<div
						className='text-sm space-y-2'
						style={{ color: 'var(--tg-theme-hint-color)' }}
					>
						<p>‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑</p>
						<p>
							‚Ä¢ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω @username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
							Telegram
						</p>
						<p>‚Ä¢ –í–≤–µ–¥–∏—Ç–µ username –≤ –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ivan_petrov)</p>
						<p>
							‚Ä¢ –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å
							–±–æ—Ç–∞
						</p>
					</div>
				</div>

				{/* –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ */}
				<div className='space-y-4'>
					{admins.map((admin) => (
						<div
							key={admin.id}
							className='rounded-lg p-4 flex items-center justify-between'
							style={{ background: 'var(--tg-theme-secondary-bg-color)' }}
						>
							<div>
								<div className='text-lg font-semibold'>
									{admin.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'}
								</div>
								<div
									className='text-sm'
									style={{ color: 'var(--tg-theme-hint-color)' }}
								>
									ID: {admin.telegramId}
								</div>
								<div
									className='text-xs'
									style={{ color: 'var(--tg-theme-hint-color)' }}
								>
									{admin.addedBy
										? `–î–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º: ${admin.addedBy}`
										: '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω'}
								</div>
								<div
									className='text-xs'
									style={{ color: 'var(--tg-theme-hint-color)' }}
								>
									{new Date(admin.createdAt).toLocaleString('ru-RU')}
								</div>
							</div>

							<div className='flex gap-2'>
								{admin.id !== 'main-admin' && (
									<button
										onClick={() => handleRemoveAdmin(admin)}
										className='px-3 py-1 rounded text-sm transition-opacity hover:opacity-80'
										style={{ background: '#dc2626', color: 'white' }}
										disabled={operationLoading}
									>
										–£–¥–∞–ª–∏—Ç—å
									</button>
								)}
								{admin.id === 'main-admin' && (
									<span
										className='text-sm'
										style={{ color: 'var(--tg-theme-hint-color)' }}
									>
										–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω
									</span>
								)}
							</div>
						</div>
					))}
				</div>

				{admins.length === 0 && (
					<div
						className='text-center py-8'
						style={{ color: 'var(--tg-theme-hint-color)' }}
					>
						–ê–¥–º–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
					</div>
				)}
			</div>

			{/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ */}
			{isAddModalOpen && (
				<div
					className='fixed inset-0 flex items-center justify-center p-4 z-50'
					style={{ background: 'rgba(0,0,0,0.5)' }}
				>
					<div
						className='rounded-lg p-6 w-full max-w-md'
						style={{ background: 'var(--tg-theme-bg-color)' }}
					>
						<h2 className='text-xl font-bold mb-4'>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞</h2>

						<div className='space-y-4'>
							<div>
								<label className='block text-sm font-medium mb-2'>
									–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *
								</label>
								<input
									type='text'
									value={searchQuery}
									onChange={(e) => handleSearchInput(e.target.value)}
									className='w-full rounded-lg px-3 py-2 border'
									style={{
										background: 'var(--tg-theme-secondary-bg-color)',
										borderColor: 'var(--tg-theme-hint-color)',
										color: 'var(--tg-theme-text-color)',
									}}
									placeholder='–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
								/>
								{searchLoading && (
									<div
										className='text-sm mt-1'
										style={{ color: 'var(--tg-theme-hint-color)' }}
									>
										–ü–æ–∏—Å–∫...
									</div>
								)}
							</div>

							{/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ */}
							{searchResults.length > 0 && (
								<div
									className='max-h-40 overflow-y-auto rounded-lg'
									style={{ background: 'var(--tg-theme-secondary-bg-color)' }}
								>
									{searchResults.map((user) => (
										<div
											key={user.telegramId}
											onClick={() => {
												setSelectedUser(user);
												setSearchQuery(user.username || '');
												setSearchResults([]);
											}}
											className={`p-3 cursor-pointer hover:opacity-80 border-b last:border-b-0 ${
												selectedUser?.telegramId === user.telegramId
													? 'opacity-80'
													: ''
											}`}
											style={{
												borderColor: 'var(--tg-theme-hint-color)',
												background:
													selectedUser?.telegramId === user.telegramId
														? 'var(--tg-theme-button-color)'
														: 'transparent',
											}}
										>
											<div className='font-medium'>
												{user.username ? `@${user.username}` : '–ë–µ–∑ username'}
											</div>
											<div
												className='text-sm'
												style={{ color: 'var(--tg-theme-hint-color)' }}
											>
												{user.role === 'admin'
													? '‚ö†Ô∏è –£–∂–µ –∞–¥–º–∏–Ω'
													: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
											</div>
										</div>
									))}
								</div>
							)}

							{/* –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å */}
							{selectedUser && (
								<div
									className='rounded-lg p-3'
									style={{ background: 'var(--tg-theme-secondary-bg-color)' }}
								>
									<div
										className='text-sm mb-1'
										style={{ color: 'var(--tg-theme-hint-color)' }}
									>
										–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
									</div>
									<div className='font-medium'>
										{selectedUser.username
											? `@${selectedUser.username}`
											: '–ë–µ–∑ username'}
									</div>
									<div
										className='text-sm'
										style={{ color: 'var(--tg-theme-hint-color)' }}
									>
										ID: {selectedUser.telegramId}
									</div>
									{selectedUser.role === 'admin' && (
										<div className='text-sm mt-1' style={{ color: '#f59e0b' }}>
											‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
										</div>
									)}
								</div>
							)}

							{searchQuery && searchResults.length === 0 && !searchLoading && (
								<div
									className='text-sm'
									style={{ color: 'var(--tg-theme-hint-color)' }}
								>
									–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.
								</div>
							)}
						</div>

						<div className='flex gap-3 mt-6'>
							<button
								onClick={handleAddAdmin}
								disabled={
									operationLoading ||
									!selectedUser?.username ||
									selectedUser.role === 'admin'
								}
								className='flex-1 px-4 py-2 rounded-lg transition-opacity hover:opacity-80 disabled:opacity-50'
								style={{
									background: 'var(--tg-theme-button-color)',
									color: 'var(--tg-theme-button-text-color)',
								}}
							>
								{operationLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞'}
							</button>
							<button
								onClick={() => {
									setIsAddModalOpen(false);
									setSearchQuery('');
									setSearchResults([]);
									setSelectedUser(null);
								}}
								disabled={operationLoading}
								className='flex-1 px-4 py-2 rounded-lg transition-opacity hover:opacity-80'
								style={{
									background: 'var(--tg-theme-secondary-bg-color)',
									color: 'var(--tg-theme-text-color)',
									border: '1px solid var(--tg-theme-hint-color)',
								}}
							>
								–û—Ç–º–µ–Ω–∞
							</button>
						</div>
					</div>
				</div>
			)}
		</div>
	);
};

export default ManageAdminsPage;
