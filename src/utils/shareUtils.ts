import type { CategorizedPlayers, Category } from '../types';
import { TELEGRAM_BOT_USERNAME } from '../config/api';
import { useTelegram } from '../hooks/useTelegram';

interface ShareData {
	categorizedPlayers: CategorizedPlayers;
	categories: Category[];
	clubName: string;
}

export const generateShareText = ({
	categorizedPlayers,
	categories,
	clubName,
}: ShareData): string => {
	let text = `üèÜ –¢–ò–†-–õ–ò–°–¢ –ò–ì–†–û–ö–û–í "${clubName.toUpperCase()}"\n\n`;

	categories.forEach((category) => {
		const players = categorizedPlayers[category.name] || [];
		const emoji = getCategoryEmoji(category.name);

		text += `${emoji} ${category.name.toUpperCase()} (${players.length}/${
			category.slots
		}):\n`;

		if (players.length > 0) {
			players.forEach((player, index) => {
				text += `${index + 1}. ${player.name}\n`;
			});
		} else {
			text += '‚Äî –ü—É—Å—Ç–æ\n';
		}
		text += '\n';
	});

	text += '‚öΩ –°–æ–∑–¥–∞–Ω–æ –≤ –±–æ—Ç–µ @myach_pro_bot';
	return text;
};

export const generateShareImage = async (
	shareData: ShareData,
): Promise<string | null> => {
	try {
		// –°–æ–∑–¥–∞–µ–º Canvas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const canvas = document.createElement('canvas');
		const ctx = canvas.getContext('2d');

		if (!ctx) return null;

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ canvas
		canvas.width = 800;
		canvas.height = 1000;

		// –§–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
		const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
		gradient.addColorStop(0, '#EC3381');
		gradient.addColorStop(1, '#FF6B9D');
		ctx.fillStyle = gradient;
		ctx.fillRect(0, 0, canvas.width, canvas.height);

		// –ó–∞–≥–æ–ª–æ–≤–æ–∫
		ctx.fillStyle = 'white';
		ctx.font = 'bold 48px Arial';
		ctx.textAlign = 'center';
		ctx.fillText('–¢–ò–†-–õ–ò–°–¢ –ò–ì–†–û–ö–û–í', canvas.width / 2, 80);

		// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞
		ctx.font = 'bold 36px Arial';
		ctx.fillText(shareData.clubName.toUpperCase(), canvas.width / 2, 140);

		// –†–µ–Ω–¥–µ—Ä–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		let yPos = 200;
		shareData.categories.forEach((category) => {
			const players = shareData.categorizedPlayers[category.name] || [];

			// –§–æ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			ctx.fillStyle = category.color;
			ctx.fillRect(50, yPos, canvas.width - 100, 60);

			// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
			ctx.fillStyle = 'white';
			ctx.font = 'bold 28px Arial';
			ctx.textAlign = 'left';
			ctx.fillText(
				`${category.name.toUpperCase()} (${players.length}/${category.slots})`,
				70,
				yPos + 40,
			);

			yPos += 80;

			// –ò–≥—Ä–æ–∫–∏
			if (players.length > 0) {
				ctx.fillStyle = 'white';
				ctx.font = '24px Arial';
				players.forEach((player, index) => {
					ctx.fillText(`${index + 1}. ${player.name}`, 70, yPos);
					yPos += 35;
				});
			} else {
				ctx.fillStyle = '#cccccc';
				ctx.font = 'italic 20px Arial';
				ctx.fillText('‚Äî –ü—É—Å—Ç–æ', 70, yPos);
				yPos += 35;
			}

			yPos += 20;
		});

		// –õ–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞ –≤–Ω–∏–∑—É
		ctx.fillStyle = 'white';
		ctx.font = '20px Arial';
		ctx.textAlign = 'center';
		ctx.fillText(
			'‚öΩ –°–æ–∑–¥–∞–Ω–æ –≤ @myach_pro_bot',
			canvas.width / 2,
			canvas.height - 40,
		);

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
		return canvas.toDataURL('image/png');
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
		return null;
	}
};

const getCategoryEmoji = (categoryName: string): string => {
	const emojiMap: Record<string, string> = {
		goat: 'üêê',
		—Ö–æ—Ä–æ—à: 'üëç',
		–Ω–æ—Ä–º: 'üëå',
		–±–µ–∑–¥–∞—Ä—å: 'üëé',
	};

	return emojiMap[categoryName.toLowerCase()] || '‚öΩ';
};

// –¢–∏–ø—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º
export type PlatformType = 'ios' | 'android' | 'windows' | 'macos' | 'unknown';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —à—ç—Ä–∏–Ω–≥–∞
export interface ShareOptions {
	imageBlob: Blob;
	text: string;
	clubName: string;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function detectPlatform(): PlatformType {
	const userAgent = navigator.userAgent.toLowerCase();

	if (/iphone|ipad|ipod/.test(userAgent)) {
		return 'ios';
	}

	if (/android/.test(userAgent)) {
		return 'android';
	}

	if (/windows/.test(userAgent)) {
		return 'windows';
	}

	if (/macintosh|mac os x/.test(userAgent)) {
		return 'macos';
	}

	return 'unknown';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É Web Share API
 */
export function supportsWebShare(): boolean {
	return 'share' in navigator && 'canShare' in navigator;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —à—ç—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤
 */
export function supportsFileSharing(): boolean {
	return supportsWebShare() && 'canShare' in navigator;
}

/**
 * –®—ç—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Web Share API
 */
async function shareViaWebShare(options: ShareOptions): Promise<boolean> {
	try {
		const imageFile = new File(
			[options.imageBlob],
			`tier-list-${options.clubName}.jpg`,
			{
				type: 'image/jpeg',
			},
		);

		const shareData = {
			text: options.text,
			files: [imageFile],
		};

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —à—ç—Ä–∏–Ω–≥–∞
		if (navigator.canShare && !navigator.canShare(shareData)) {
			console.warn('–§–∞–π–ª—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –¥–ª—è —à—ç—Ä–∏–Ω–≥–∞ –Ω–∞ —ç—Ç–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ');
			// –ü—Ä–æ–±—É–µ–º –±–µ–∑ —Ñ–∞–π–ª–∞
			await navigator.share({ text: options.text });
			return true;
		}

		await navigator.share(shareData);
		return true;
	} catch (error: any) {
		if (error.name === 'AbortError') {
			console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª —à—ç—Ä–∏–Ω–≥');
			return true; // –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫–æ–π
		}
		console.error('–û—à–∏–±–∫–∞ Web Share API:', error);
		return false;
	}
}

/**
 * –®—ç—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ Telegram WebApp API
 */
async function shareViaTelegram(options: ShareOptions): Promise<boolean> {
	try {
		const { tg } = useTelegram();

		if (!tg) {
			return false;
		}

		// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
		const imageUrl = URL.createObjectURL(options.imageBlob);

		// –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Å—ã–ª–∫–∏
		const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(
			`${options.text} - @${TELEGRAM_BOT_USERNAME}`,
		)}`;

		tg.openTelegramLink(shareUrl);

		// –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL
		setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);

		return true;
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ Telegram —à—ç—Ä–∏–Ω–≥–∞:', error);
		return false;
	}
}

/**
 * –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function downloadImage(options: ShareOptions): Promise<boolean> {
	try {
		const url = URL.createObjectURL(options.imageBlob);
		const link = document.createElement('a');
		link.href = url;
		link.download = `tier-list-${options.clubName}.jpg`;
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);

		// –û—á–∏—â–∞–µ–º URL —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
		setTimeout(() => URL.revokeObjectURL(url), 1000);

		return true;
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:', error);
		return false;
	}
}

/**
 * –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
 */
async function copyToClipboard(options: ShareOptions): Promise<boolean> {
	try {
		// –ü—Ä–æ–±—É–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
		if ('clipboard' in navigator && 'write' in navigator.clipboard) {
			const clipboardItem = new ClipboardItem({
				'image/jpeg': options.imageBlob,
			});

			await navigator.clipboard.write([clipboardItem]);
			return true;
		}

		// Fallback - –∫–æ–ø–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
		if ('clipboard' in navigator && 'writeText' in navigator.clipboard) {
			await navigator.clipboard.writeText(options.text);
			return true;
		}

		return false;
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
		return false;
	}
}

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —à—ç—Ä–∏–Ω–≥–∞
 */
export async function universalShare(options: ShareOptions): Promise<{
	success: boolean;
	method: string;
	error?: string;
}> {
	const platform = detectPlatform();

	console.log(`–ü–æ–ø—ã—Ç–∫–∞ —à—ç—Ä–∏–Ω–≥–∞ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: ${platform}`);

	// 1. –ü—Ä–æ–±—É–µ–º Web Share API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è iOS –∏ Android)
	if ((platform === 'ios' || platform === 'android') && supportsWebShare()) {
		const webShareSuccess = await shareViaWebShare(options);
		if (webShareSuccess) {
			return { success: true, method: 'webShare' };
		}
	}

	// 2. –ü—Ä–æ–±—É–µ–º Telegram –Ω–∞—Ç–∏–≤–Ω—ã–π —à—ç—Ä–∏–Ω–≥
	const telegramSuccess = await shareViaTelegram(options);
	if (telegramSuccess) {
		return { success: true, method: 'telegram' };
	}

	// 3. –ü—Ä–æ–±—É–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
	const clipboardSuccess = await copyToClipboard(options);
	if (clipboardSuccess) {
		return { success: true, method: 'clipboard' };
	}

	// 4. Fallback - —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	const downloadSuccess = await downloadImage(options);
	if (downloadSuccess) {
		return { success: true, method: 'download' };
	}

	return {
		success: false,
		method: 'none',
		error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–∏ –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤',
	};
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —à—ç—Ä–∏–Ω–≥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 */
export function getAvailableShareMethods(): Array<{
	method: string;
	name: string;
	available: boolean;
}> {
	const platform = detectPlatform();

	return [
		{
			method: 'webShare',
			name: '–°–∏—Å—Ç–µ–º–Ω—ã–π —à—ç—Ä–∏–Ω–≥',
			available:
				supportsWebShare() && (platform === 'ios' || platform === 'android'),
		},
		{
			method: 'telegram',
			name: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram',
			available: true,
		},
		{
			method: 'clipboard',
			name: '–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å',
			available: 'clipboard' in navigator,
		},
		{
			method: 'download',
			name: '–°–∫–∞—á–∞—Ç—å',
			available: true,
		},
	];
}
